name: SMM Documentation Tracking

on:
  schedule:
    # Run every day at 9:00 AM UTC
    - cron: '0 9 * * *'
  push:
    paths:
      - '_dev/docs/**'
  pull_request:
    paths:
      - '_dev/docs/**'
  workflow_dispatch:

jobs:
  track-documentation:
    runs-on: ubuntu-latest
    name: Track SMM Documentation Continuity

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq

    - name: Run Documentation Tracking
      id: track
      run: |
        cd ${{ github.workspace }}
        chmod +x _dev/docs/track-docs.sh
        ./_dev/docs/track-docs.sh

    - name: Check for alerts
      id: alerts
      run: |
        if [ -f "_dev/docs/.alerts.json" ]; then
          alert_count=$(jq length _dev/docs/.alerts.json)
          if [ "$alert_count" -gt 0 ]; then
            echo "has_alerts=true" >> $GITHUB_OUTPUT
            echo "alert_count=$alert_count" >> $GITHUB_OUTPUT
          else
            echo "has_alerts=false" >> $GITHUB_OUTPUT
            echo "alert_count=0" >> $GITHUB_OUTPUT
          fi
        else
          echo "has_alerts=false" >> $GITHUB_OUTPUT
          echo "alert_count=0" >> $GITHUB_OUTPUT
        fi

    - name: Create Issue for Alerts
      if: steps.alerts.outputs.has_alerts == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Read alerts file
          const alertsPath = path.join(process.cwd(), '_dev/docs/.alerts.json');
          let alerts = [];
          
          if (fs.existsSync(alertsPath)) {
            const alertsContent = fs.readFileSync(alertsPath, 'utf8');
            alerts = JSON.parse(alertsContent);
          }
          
          // Get recent alerts (last 24 hours)
          const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
          const recentAlerts = alerts.filter(alert => new Date(alert.timestamp) > oneDayAgo);
          
          if (recentAlerts.length > 0) {
            let issueBody = '## ðŸš¨ SMM Documentation Alerts\n\n';
            issueBody += `Found ${recentAlerts.length} alert(s) in the last 24 hours:\n\n`;
            
            recentAlerts.forEach(alert => {
              issueBody += `### ${alert.type}\n`;
              issueBody += `- **File**: \`${alert.file}\`\n`;
              issueBody += `- **Message**: ${alert.message}\n`;
              issueBody += `- **Timestamp**: ${alert.timestamp}\n\n`;
            });
            
            issueBody += '## Action Required\n';
            issueBody += 'Please review the affected documentation files and take appropriate action to ensure project continuity.\n\n';
            issueBody += '**Generated by**: SMM Documentation Tracking System\n';
            issueBody += `**Workflow**: ${context.workflow}\n`;
            issueBody += `**Run**: ${context.runNumber}`;
            
            // Check if there's already an open issue for documentation alerts
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'documentation,alert,smm'
            });
            
            if (existingIssues.data.length === 0) {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `ðŸš¨ SMM Documentation Alerts - ${new Date().toISOString().split('T')[0]}`,
                body: issueBody,
                labels: ['documentation', 'alert', 'smm', 'automated']
              });
            } else {
              // Update existing issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssues.data[0].number,
                body: issueBody
              });
              
              // Add comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssues.data[0].number,
                body: `ðŸ”„ Updated with new alerts - ${recentAlerts.length} alert(s) found in latest check.`
              });
            }
          }

    - name: Upload tracking logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: smm-documentation-tracking-logs
        path: |
          _dev/docs/.tracking.log
          _dev/docs/.alerts.json
        retention-days: 30

    - name: Summary
      if: always()
      run: |
        echo "## SMM Documentation Tracking Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ -f "_dev/docs/.tracking.log" ]; then
          echo "### Recent Log Entries" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          tail -10 _dev/docs/.tracking.log >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Alert Status" >> $GITHUB_STEP_SUMMARY
        if [ "${{ steps.alerts.outputs.has_alerts }}" == "true" ]; then
          echo "ðŸš¨ **${{ steps.alerts.outputs.alert_count }} alert(s) found**" >> $GITHUB_STEP_SUMMARY
        else
          echo "âœ… **No alerts** - All documentation files are in good status" >> $GITHUB_STEP_SUMMARY
        fi